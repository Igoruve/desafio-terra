services:
  # Servicio de la aplicación Node.js
  app:
    container_name: ${APP_HOST}
    build: .
    restart: unless-stopped
    ports:
      - ${APP_PORT}:3000
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    networks:
      - terra_network
    depends_on:
      - mongo # Descomentar si se usa MongoDB

  # Servicio de MySQL
  # mysql:
  #   container_name: ${DB_HOST:-mysql}
  #   image: mysql:8.0
  #   restart: unless-stopped
  #   ports:
  #     - "${DB_PORT:-3306}:3306"  # Comentar en producción para mayor seguridad
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-root}
  #     MYSQL_DATABASE: ${DB_NAME:-database}
  #     MYSQL_USER: ${DB_USER:-user}
  #     MYSQL_PASSWORD: ${DB_PASSWORD:-password}
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #     - ./database/scripts:/docker-entrypoint-initdb.d:ro  # Scripts de inicialización

  # Servicio de MongoDB (opcional)
  mongo:
    image: mongo:latest
    container_name: ${DB_HOST}
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${DB_NAME}
    ports:
      - ${DB_PORT}:27017  # Comentar en producción para mayor seguridad
    networks:
      - terra_network
    volumes:
      - mongo_data:/data/db
      #- ./database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro  # Script de inicialización

volumes:
  node_modules:
  mongo_data:  # Descomentar si se usa MongoDB

networks:
  terra_network: